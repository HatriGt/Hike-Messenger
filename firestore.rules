rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId &&
        validateUserData(request.resource.data);
      allow update: if request.auth != null && request.auth.uid == userId &&
        validateUserData(request.resource.data);
      allow delete: if false; // Prevent user deletion for now
    }
    match /users/{userEmail} {
      allow read, write: if request.auth != null && request.auth.token.email == userEmail;
    }
    match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.token.email == userEmail;
    }
    
    // Message rules
   match /messages/{messageId} {
     allow read: if request.auth != null && 
       (request.auth.uid in resource.data.participants ||
        request.query.limit <= 100);
     allow create: if request.auth != null && 
       request.auth.uid in request.resource.data.participants &&
       validateMessageData(request.resource.data);
     allow update: if request.auth != null && 
       (request.auth.uid in resource.data.participants ||
        request.auth.uid in request.resource.data.participants) &&
       (request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['delivered', 'read']));
     allow delete: if false;
   }
    
    // Rule to allow reading all users (for user search or user list)
    match /users/{userId} {
      allow list: if request.auth != null;
    }
    
    // Chat room rules (if you implement group chats)
    match /chatRooms/{roomId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow delete: if false; // Prevent chat room deletion for now
    }
    
    // Helper functions for data validation
    function validateUserData(userData) {
      return userData.keys().hasOnly(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'lastSignIn']) &&
        userData.uid is string &&
        userData.email is string &&
        userData.displayName is string &&
        userData.photoURL is string &&
        userData.createdAt is timestamp &&
        (userData.lastSignIn == null || userData.lastSignIn is timestamp);
    }
    
    function validateMessageData(messageData) {
  return messageData.keys().hasOnly(['text', 'uid', 'createdAt', 'delivered', 'displayName', 'participants', 'photoURL', 'read', 'recipientUid']) &&
    messageData.text is string &&
    messageData.uid is string &&
    messageData.createdAt is timestamp &&
    messageData.delivered is bool &&
    messageData.displayName is string &&
    messageData.participants is list &&
    messageData.photoURL is string &&
    messageData.read is bool &&
    messageData.recipientUid is string;
}
  }
}
